var Reminder;
Task = require('./tasks');

Reminder = function() {
	function Reminder(){
		this._task = null;
		this._due_time = null;
		this._due_date = null;
		this._rem = null;
		this._channel = null;
		this._isDM = null;
		this._hasError = null;
		this._taskClass = new Task();
		this._params = null;
		this._reminder = null;
	}

	Reminder.prototype.setReminder = function(objTask, channel, user, isDM) {
		this._task = objTask;
		if (this.reminderShouldBeSet(this._task)) {
			this._due_time = this._task["due_time"] || "00:00";
			this._due_date = this._task["due_date"] || new Date();
			this._channel = channel;
			this._isDM = isDM;
			var due_date = this.formatTime(this._due_time, this._due_date);
	    return this._rem = this.setTimeOut(due_date, function() {
				this._reminder = new Reminder();
				this._reminder.sendReminderIfTaskExists(due_date, objTask, channel, user, isDM);
			});
	  }
		return false;
	}

	// These functions are private
	Reminder.prototype.reduceMinutes = function (objTime, num) {
		return new Date(objTime.setMinutes(objTime.getMinutes() - num));
	}

	Reminder.prototype.incrementMinutes = function (objTime, num) {
		return new Date(objTime.setMinutes(objTime.getMinutes() + num));
	}

	Reminder.prototype.reminderShouldBeSet = function(task){
	  return (typeof task["due_time"] !== "undefined");
	}

	Reminder.prototype.sendReminder = function(due_date, task, channel, user, isDM){
		this._due_date = due_date;
		this._task = task;
	  if (isDM) {
	    channel.send([">>>Reminder: `" + this._task["task"] + " `",
										"",
										"Send `task --s --a " + this._task["alias"] + "` for details"].join("\r\n"));
	  } else {
	    channel.send(">Hey @channel, ```Reminder: " + this._task["task"] + " ```");
	  }
	}

	Reminder.prototype.sendReminderIfTaskExists = function(due_date, task, channel, user, isDM) {
		debugger;
		this._taskClass = new Task();
	 	this._params = { task : task, user : { username : user.name }}

		this._taskClass.show(this._params, function(data) {
			data = JSON.parse(data);

			if (!data.hasOwnProperty("ok") && data.hasOwnProperty("message")) {
				this._reminder = new Reminder();
				this._reminder.sendReminder(due_date, task, channel, user, isDM);
				this._due_date = new Date(due_date.setDate(due_date.getDate() + 1));

				this._reminder.setTimeOut(this._due_date, function() {
					this._reminder = new Reminder();
					this._reminder.sendReminderIfTaskExists(this._due_date, task, channel, user, isDM);
				});
			}
		});
	}

	Reminder.prototype.setTimeOut = function(due_date, callback){
		return this.setToHappen(due_date, callback);
	}

	Reminder.prototype.setToHappen = function (d, callback) {
		var time_diff = d.getTime() - (new Date()).getTime();
		return setTimeout(callback, time_diff);
	}

	Reminder.prototype.formatTime = function (strTime, strDate) {
		try {
			var due_date = new Date(strDate);
			var tIndex = strTime.indexOf("T"); // Check if its a date_time formatted string from db
			if (tIndex != -1) { strTime = strTime.substring(tIndex + 1, 19) } //format if its db date_time
			var index = strTime.indexOf(":");
			var h = 0, m = 0;
			if (index != -1) {
				h = parseInt(strTime.substr(0, index)) || 0;
				m = parseInt(strTime.substr(index + 1)) || 0;
			}
			if (strTime.indexOf('pm') != -1 ) {
	 			h = h > 12 ? h : h + 12
			}
			var _time = new Date();
			due_date.setHours(h);
			due_date.setMinutes(m);
			due_date.setSeconds(0);
			return due_date;
		} catch (err) {
			return new Date();
		}
	};

	Reminder.prototype.setAllTimers = function(slack, arrTasks) {
		var channel, user, isDM;
		try {
			if (arrTasks) {
			 	arrTasks = JSON.parse(arrTasks);
				arrTasks = arrTasks["message"]
				var task = {};
				for (i = 0; i < arrTasks.length; i++) {
					task = arrTasks[i];
					if (!task["message_channel"] && !task["user_channel"]) continue;
					channel = slack.getChannelGroupOrDMByID(task["message_channel"]);
					user = slack.getUserByID(task["user_channel"]);
					if (!channel && user) continue;
					isDM = channel.user === user.id ? true : false;
				  this.setReminder(task, channel, user, isDM);
				}
			} else {
				console.log("No data was received to reset timers");
			}
		} catch (err) {
		console.log(err.message);
		}
	}
	return Reminder;
}();
module.exports = Reminder;
