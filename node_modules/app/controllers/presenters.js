var Presenters, Help, Reminder;

Reminder = require('./reminder');

Help = require('./help');

Enumerables = require('app/helpers/enumerables');

Presenters = function() {
	var Presenters = function(task, channel, user){
		this._task = task;
		this._channel = channel;
		this._user = user;
		this._isDM = isDM;
		this._reminder = null;
		this._help = new Help();
		this._enums = new Enumerables();
	}

	Presenters.prototype.handleDataFromAPI = function(data){
		if (typeof(data) != "object") { data = JSON.parse(data); }

		var hasError = data.hasOwnProperty("ok") ? true : false;
		this.sendResponseToUser(data);

		if (!hasError && this.reminderShouldBeSet(this._task["task"])) {
			this.setReminder(this._task, this._channel, this._user, this._isDM);
		} else if (hasError) {
			return hasError;
		}
	}

	Presenters.prototype.sendResponseToUser = function(data) {
		data = hasOwnProperty.call(data, "message") ? data["message"] : this._help.show_help(user, "error");
		data = JSON.stringify(data, null, 4).trim();
		channel.send(enums.preProcessString(data));
	}

	Presenters.prototype.setReminder = function(task, channel, user, isDM) {
		this._reminder = new Reminder();
		this._reminder = this.reminder.setReminder(task, channel, user, isDM);

		if (this._reminder) {
			return channel.send([">>>A reminder to task `" + task["alias"] + "` has been set",
													" ",
													"To view this task at anytime, send ",
													"`task --s --a " + task["alias"] + "` ",
													" ",
													"`--s : show, --x : delete, --e : edit, --a : alias` "].join("\r\n"));
		}
	}

	Presenters.prototype.reminderShouldBeSet = function(task){
		return ((typeof task["due_time"] !== "undefined") && ( task["operation"] === "create" || task["operation"] === "update"));
	}

	return Presenters;
}();

module.exports = Presenters;
