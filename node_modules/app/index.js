var CueBot, Users, Tasks, Presenters, Help, Translator;

User = require('./controllers/users');

Task = require('./controllers/tasks');

Reminder = require('./controllers/reminder');

Help = require('./controllers/help');

Presenters = require('./controllers/presenters');

Translator = require('./controllers/translator');

Enumerables = require('./helpers/enumerables');


CueBot = function() {
	function CueBot(slack) {
		this._params = {};
		this._control = {};
		this._operator = null;  // Operator could be either task or user, depending on incoming message
		this._channel = null;
		this._message = null;
		this._user = null;
		this._messageID = "";
		this._userID = "";
		this._task = null;
		this._help = new Help();
		this._isDM = false;
		this._slack = slack
		this._translator = new Translator();
		this._enums = new Enumerables();
		this._reminder = new Reminder(slack);
		this._reminderSet = false;
	}

	CueBot.prototype.handleReq = function (message, user, channel) {
		this._params = {};
		this._channel = channel;
		this._user = user;
		this._message = message;
		try {
			var isDM = this._enums.checkForDM(this._channel, this._message);
			if (this._message.type === 'message') {
				if (isDM) {
					// Message is DM. Route appropriately ...
					this.routeReq(this._user, this._message, function(task, data) {
						var presenter = new Presenters(task, channel, user, isDM);
						presenter.handleDataFromAPI(data);
					});
				}
				else if (this._enums.isDirect(this._slack.self.id, message.text)) {
					this._channel.send(this.help("sendDM")); // Request for a DM
				}
			}
		}
		catch (error) {
			console.log(error.message);
		}
	}

	CueBot.prototype.routeReq = function(user, message, callback) {
		if (message.text.substring(0, 4).toLowerCase() === "help") {
			return this._channel.send(this._help.show_help(user, message.text.substring(4).trim()));
		}
		this._messageID = message.channel || "";
		this._userID = message.user || "";
		this._control = this._translator.translate(message.text);
		this._control = this.addChannels(this._control, this._messageID, this._userID);
		this._params[this._control["controller"]] = this._control;
		this._params["user"] = this.userDetails(user);

		// return if there's an issue with the commands from user
		if (this._control.hasOwnProperty('ok')) return callback(this._control);

		// determine operation, then send to appropriate route
		var task = this._params;
		this._operator = this._control["controller"] == "task" ? new Task() : new User();
		return this.sendToRoute(this._control, this._params, function(data){
			callback(task, data);
		});
	}

	CueBot.prototype.sendToRoute = function(control, params, callback){
		this._control = control;
		switch (this._control["operation"]) {
			case "create":
				return this._operator.create(params, callback);
			case "show":
				return this._operator.show(params, callback);
			case "update":
				return this._operator.update(params, callback);
			case "delete":
				return this._operator.delete(params, callback);
			default:
				return this._help.show_help("welcome");
		}
	}

	CueBot.prototype.addChannels = function(params, messageID, userID) {
		params["message_channel"] = messageID;
		params["user_channel"] = userID;
		return params;
	}

	CueBot.prototype.setAllReminders = function(slack) {
		try {
			var bot_response = { text: "task --s" }
			var user = { name: "cueBot", profile: "" };
			this.routeReq(user, bot_response, function(task, all_tasks){
				this._reminder = new Reminder(slack);
				this._reminder.setAllTimers(slack, all_tasks)
			});
		} catch (err) {
			console.log(err.message);
		}
	}

	CueBot.prototype.translate = function(response) {
		return this._translator.translate(message);
	}

	CueBot.prototype.help = function(user, scope){
		this._help = new Help();
		return this._help.show_help(user, scope);
	}

	CueBot.prototype.userDetails = function(user){
		return {
			username : user.name,
			first_name : user.profile.first_name || "",
			last_name : user.profile.last_name || "",
			email : user.profile.email || ""
		};
	}

	return CueBot;
}();
module.exports = CueBot;
